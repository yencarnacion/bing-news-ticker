#!/usr/bin/env python3

import openai
import json
import glob
from env import openAI_key

# Setting up the API key
openai.api_key = openAI_key

# Define the summary custom function
summary_custom_functions = [
    {
        'name': 'summary_structured_data',
        'description': 'Get a news summary from the body of the input text',
        'parameters': {
            'type': 'object',
            'properties': {
                'name': {
                    'type': 'string',
                    'description': 'a summary of less that 10 words of the text contained in the description property.  the summary is generated by chatgpt '
                },
                'url': {
                    'type': 'string',
                    'description': 'this will always be the following text http://192.168.177.150:8081/ttn.html'
                },
                'description': {
                    'type': 'string',
                    'description': 'This is a news summary. it should always be an exact replica extracted from the text provided.'
                },
                'provider': {
                    'type': 'string',
                    'description': 'This is the source of the news.  it should always be a normal text (that is not ALLCAPS) version derived from the text provided.'
                }
                
            }
        }
    }
]

prompt = """
Convert the blob of text below starting after PROVIDED NEWS to the json format provided as a sample of what I want the output to look like.  

The blob of text contains a section of news.  There is at least 1 news story.  Note that there could be more than one news story.  Each news story start with "-" Convert all of the stories in the section, not just the first one.  I want all of the stories in the format provided. each story starts with "-"  do not make up stories.  do not use stories that were not provided.  Give an entire json in one piece for all the stories in the section. Do not repeat my request in your response.  your response should only contain the requested json string.

The json sample of the provided format follows:
[{"name": "", "url": "", "description": "", "provider": ""}, {"name": "", "url": "", "description": "", "provider": ""}, {"name": "", "url": "", "description": "", "provider": ""}, {"name": "", "url": "", "description": "", "provider": ""}]] Notice that there is only one name, one url, one description, and one provider that is to be used for each story provided

as an example if a news section looks as follows
THE FINANCIAL TIMES
-The US government believes Chinese defense minister Li Shangfu has been placed under investigation in the latest sign of turmoil among elite members of Beijing’s military and foreign policy establishment. Three US officials and two people briefed on the intelligence said the US had concluded that Li, who has not been seen in public for more than two weeks, had been stripped of his responsibilities as defense minister.
-The European Central Bank has raised interest rates to an all-time high in a bid to cool consumer prices, but the euro fell after the central bank signalled its cycle of increases was near its end. The ECB’s knife-edge decision to lift its deposit rate for the 10th consecutive time, by 25 basis points to 4 per cent, came as officials cut their growth forecasts for the eurozone economy.

 you would do the following for the first story
for "name" do a summary of less than 10 words of the text "The US government believes Chinese defense minister Li Shangfu has been placed under investigation in the latest sign of turmoil among elite members of Beijing’s military and foreign policy establishment. Three US officials and two people briefed on the intelligence said the US had concluded that Li, who has not been seen in public for more than two weeks, had been stripped of his responsibilities as defense minister."
for "url" always use "http://192.168.177.150:8081/ttn.html"
for "description" use the exact text provided.  do not change a word unless required for not breaking the json format.  For example if there a quotes (") you would put them is a format acceptable for json that would render correctly when displayed in a browser such as google chrome.
for "provider" use "THE FINANCIAL TIMES". notice that the provider is in all caps at the start of the section

yout would do the following for the second story
for "name" do a summary of less than 10 words of the text The European Central Bank has raised interest rates to an all-time high in a bid to cool consumer prices, but the euro fell after the central bank signalled its cycle of increases was near its end. The ECB’s knife-edge decision to lift its deposit rate for the 10th consecutive time, by 25 basis points to 4 per cent, came as officials cut their growth forecasts for the eurozone economy.
for "url" always use "http://192.168.177.150:8081/ttn.html"
for "description" use the exact text provided.  do not change a word unless required for not breaking the json format.  For example if there a quotes (") you would put them is a format acceptable for json that would render correctly when displayed in a browser such as google chrome.
for "provider" use "THE FINANCIAL TIMES". notice that the provider is in all caps at the start of the section

you would repeat the instructions above getting "name", "url", "description", and "provider" for all the stories in the section.  Remember, stories start with "-"
"""

# Convert the Python object to a JSON formatted string
json_text = json.dumps(summary_custom_functions, indent=4)

# Loop over all files with the pattern clean-chunk_*.txt
for filepath in glob.glob("clean-chunk_*.txt"):
    with open(filepath, "r") as file:
        news_section = file.read()

        # Calling the OpenAI API
        response = openai.ChatCompletion.create(
            model='gpt-3.5-turbo',
            #model='gpt-4',
            messages=[{'role': 'user', 'content': prompt+json_text+"PROVIDED NEWS\n"+news_section}]#,
            #functions=summary_custom_functions,
            #function_call='auto'
        )

        print(response)
        
        # Loading the response as a JSON object
        json_response = json.loads(response['choices'][0]['message']['content'])
        print(json.dumps(json_response, indent=4))

        
        # Saving to the corresponding json file
        output_filename = filepath.replace('.txt', '.json')
        with open(output_filename, 'w') as json_file:
            #json.dump(json_response, json_file, indent=4)
            #json_file.write(response)
            json_file.write(json.dumps(json_response, indent=4))
print("All files processed!")
